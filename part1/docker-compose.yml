version: '3.9'

services:
  db:
    image: ghcr.io/eslih/postgres:16.1-alpine
    expose:
      - 5432
    env_file:
      - .env # env_file created and docker ignore file implemented
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    healthcheck: # healthcheck implemented to make sure that database is up and operational
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - database

  web:
    build: ./pointsApp
    ports:
      - 5000:5000
    networks:
      - database # I need to put the web service on the same network as my database to make sure that i have my connection available as i have no API server in between
      - web
    depends_on: # the web application will only start after the database is up and ready to accept connections
      db:
        condition: service_healthy

volumes: # volumes to ensure persistant data storage => no data is stored in the image itself.
  db:

networks: # networks created to make sure that database is separated
  web:
  database: